<?php

namespace App\Imports;

use App\Models\NotificacionAviso;
use Carbon\Carbon;
use DateTime;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Auth;
use Maatwebsite\Excel\Concerns\ToCollection;
use Maatwebsite\Excel\Concerns\WithHeadingRow;
use Maatwebsite\Excel\Concerns\WithBatchInserts;
use Maatwebsite\Excel\Concerns\WithChunkReading;
use Maatwebsite\Excel\Concerns\Importable;
use PhpOffice\PhpSpreadsheet\Shared\Date;

class NotificacionAvisoImport implements ToCollection, WithHeadingRow, WithBatchInserts, WithChunkReading
{
    use Importable;

    public $errores = [];

    private $publi_notificacion;
    private $tipoPlantillaId;
    private $organismoId;
    private $rutaArchivoExel;
    private $estadoAuditoriaId;
    private $fk_idusuario;
    private $username;
    private $extension;

    public function setConfiguracion($publi_notificacion, $tipoPlantillaId, $organismoId, $rutaArchivoExel, $estadoAuditoriaId, $fk_idusuario, $username, $extension)
    {
        $this->publi_notificacion = $publi_notificacion;
        $this->tipoPlantillaId = $tipoPlantillaId;
        $this->organismoId = $organismoId;
        $this->rutaArchivoExel = $rutaArchivoExel;
        $this->estadoAuditoriaId = $estadoAuditoriaId;
        $this->fk_idusuario = $fk_idusuario;
        $this->username = $username;
        $this->extension = $extension;
    }

    public function collection(Collection $rows)
    {
        foreach ($rows as $row) {
            $row = $row->toArray();

            try {
                if ($this->extension === 'csv') {
                    if (empty(trim($row['nombre_ciudadano'] ?? ''))) {
                        $this->errores[] = "El campo 'nombre_ciudadano' es obligatorio.";
                        continue;
                    }

                    if (empty($row['cedula_identificacion']) || !ctype_digit((string) $row['cedula_identificacion'])) {
                        $this->errores[] = "El campo 'cedula_identificacion' debe contener solo dígitos.";
                        continue;
                    }
                }

                if (in_array($this->tipoPlantillaId, [1, 2])) {
                    if ($this->extension === 'csv') {
                        if (
                            !$this->validarCampoNumerico($row, 'tipo_impuesto', 'Tipo de impuesto') ||
                            !$this->validarCampoNumerico($row, 'tipo_causa_devolucion', 'Tipo de causa de devolución') ||
                            !$this->validarCampoNumerico($row, 'tipo_acto_tramite', 'Tipo de acto de trámite') ||
                            !$this->validarCampoNumerico($row, 'tipo_estado_publicacion', 'Tipo de estado de publicación')
                        ) {
                            continue;
                        }
                    }
                    $this->coactivo_persuasivo($row);
                } else {
                    if (!$this->validarLiquidacion($row, 'liquidacion')) {
                        continue;
                    }
                    $this->liquidaciones($row);
                }
            } catch (\Exception $e) {
                Log::error("Error al procesar la fila: " . json_encode($row) . " - " . $e->getMessage());
            }
        }
    }

    public function coactivo_persuasivo($row)
    {
        $fechas = $this->conversionDateExcelMonth($row['fecha_publicacion'], $row['fecha_desfijacion'], 1);
        if (!$fechas) return;

        try {
            NotificacionAviso::create([
                'publi_notificacion'         => $this->publi_notificacion,
                'fk_idorganismo'             => $this->organismoId,
                'fk_idusuario'               => $this->fk_idusuario ?? Auth::id(),
                'fk_idtp_imp'                => $row['tipo_impuesto'],
                'fk_tipo_plantilla'          => $this->tipoPlantillaId,
                'ruta_archivos'              => $this->rutaArchivoExel,
                'nombre_ciudadano'           => $row['nombre_ciudadano'],
                'cedula_identificacion'      => $row['cedula_identificacion'],
                'fecha_publicacion'          => $fechas['fecha_publicacion']->format('Y-m-d'),
                'fecha_desfijacion'          => $fechas['fecha_desfijacion']->format('Y-m-d'),
                'id_predio'                  => null,
                'objeto_contrato'            => null,
                'num_predial'                => null,
                'fk_publi_noti'              => null,
                'fk_tipo_acto_tramite'       => $row['tipo_acto_tramite'] ?? null,
                'fk_estado_publicacion'      => $row['estado_publicacion'] ?? null,
                'fk_tipo_causa_devolucion'   => $row['tipo_causa_devolucion'] ?? null,
                'json_plantilla'             => json_encode(['data' => $row[7] ?? []]),
                'id_estado_auditoria'        => $this->estadoAuditoriaId,
            ]);
        } catch (\Exception $e) {
            Log::error('Error creando NotificacionAviso: ' . $e->getMessage());
        }
    }

    public function liquidaciones($row)
    {
        $fechas = $this->conversionDateExcelDay($row['fecha_publicacion'], $row['fecha_desfijacion'], 5);
        if (!$fechas) return;

        NotificacionAviso::create([
            'publi_notificacion'         => $this->publi_notificacion,
            'fk_idorganismo'             => $this->organismoId,
            'fk_idusuario'               => $this->fk_idusuario ?? Auth::id(),
            'fk_idtp_imp'                => '1',
            'fk_tipo_plantilla'          => $this->tipoPlantillaId,
            'ruta_archivos'              => $this->rutaArchivoExel,
            'nombre_ciudadano'           => $row['nombre_ciudadano'],
            'cedula_identificacion'      => $row['cedula_identificacion'],
            'fecha_publicacion'          => $fechas['fecha_publicacion']->format('Y-m-d'),
            'fecha_desfijacion'          => $fechas['fecha_publicacion']->format('Y-m-d'),
            'id_predio'                  => $row['id_predio'] ?? null,
            'objeto_contrato'            => $row['objeto_contrato'] ?? null,
            'num_predial'                => $row['num_predial'] ?? null,
            'fk_publi_noti'              => $row['publi_noti'] ?? null,
            'fk_tipo_acto_tramite'       => $row['tipo_acto_tramite'] ?? null,
            'fk_estado_publicacion'      => $row['estado_publicacion'] ?? null,
            'fk_tipo_causa_devolucion'   => $row['tipo_causa_devolucion'] ?? null,
            'json_plantilla'             => json_encode(['data' => $row[7] ?? []]),
            'id_estado_auditoria'        => $this->estadoAuditoriaId,
        ]);
    }

    private function validarCampoNumerico($row, $campo, $nombreCampo)
    {
        if (empty($row[$campo])) {
            $this->errores[] = "Fila " . ($row['#'] ?? 'desconocida') . ": El campo '{$nombreCampo}' es obligatorio.";
            return false;
        }

        if (!is_numeric($row[$campo])) {
            $this->errores[] = "Fila " . ($row['#'] ?? 'desconocida') . ": El campo '{$nombreCampo}' debe ser numérico.";
            return false;
        }

        return true;
    }

    public function validarLiquidacion($row, $campo)
    {
        $liquidacion = trim((string) ($row[$campo] ?? ''));

        if ($liquidacion === '') {
            $this->errores[] = "El campo LIQUIDACION es obligatorio.";
            return false;
        }

        if (!ctype_digit($liquidacion)) {
            $this->errores[] = "El campo LIQUIDACION debe contener solo números.";
            return false;
        }

        return true;
    }

    public function conversionDateExcelMonth($fechaPub, $fechaDesfijacion, $diasExtra)
    {
        try {
            $fechaPublicacion = is_numeric($fechaPub) ? Date::excelToDateTimeObject($fechaPub) : new DateTime($fechaPub);
            $fechaDesfijacion = is_numeric($fechaDesfijacion) ? Date::excelToDateTimeObject($fechaDesfijacion) : new DateTime($fechaDesfijacion);

            return [
                'fecha_publicacion' => $fechaPublicacion,
                'fecha_desfijacion' => $fechaDesfijacion,
            ];
        } catch (\Exception $e) {
            $this->errores[] = "Error al convertir fechas: " . $e->getMessage();
            return null;
        }
    }

    public function conversionDateExcelDay($fechaPub, $fechaDesfijacion, $diasExtra)
    {
        try {
            $fechaPublicacion = is_numeric($fechaPub) ? Date::excelToDateTimeObject($fechaPub) : new DateTime($fechaPub);
            $fechaDesfijacion = (clone $fechaPublicacion)->modify("+{$diasExtra} days");

            return [
                'fecha_publicacion' => $fechaPublicacion,
                'fecha_desfijacion' => $fechaDesfijacion,
            ];
        } catch (\Exception $e) {
            $this->errores[] = "Error al convertir fechas: " . $e->getMessage();
            return null;
        }
    }

    public function batchSize(): int
    {
        return 500;
    }

    public function chunkSize(): int
    {
        return 500;
    }
}
